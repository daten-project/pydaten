#!/usr/bin/python3

import hashlib
from argon2.low_level import hash_secret_raw, Type

from pydaten.core import difficulty
from pydaten.common.address import RawAddress

VERSION = 0
MAX_PEERS = 128
HEARTBEAT_INTERVAL = 60 # Seconds
BAD_PEER_BAN_TIME = 60 # Seconds

QUERY_MAX_BLOCKS = 100

SUPPLY = 18446744073709551615 # 18,446,744,073.709551615
MAX_TRANSACTIONS_PER_BLOCK = 2000
MINIMUM_HASH_DIFFICULTY = difficulty.normalize(bytes.fromhex('000fffff00000000000000000000000000000000000000000000000000000000'))
MINIMUM_HASH_DIFFICULTY_COMPRESSED = difficulty.compress(MINIMUM_HASH_DIFFICULTY)
TARGET_TIME_PER_BLOCK = 10
DIFFICULTY_ADJUSTMENT_SPAN = 10
SIGNIFICANT_DIGITS = 9 # Milli, Micro, Nano
MAX_BLOCK_SIZE = 2 * 1024 * 1024 # 2MBs
DIFFICULTY_CHANGE_RATIO_LIMIT = 4
BLOCKS_CLOCK_CHECK = 10
REWARD_DIVISION = 1000000
SUPPLY_NAME = RawAddress(b'\xff' * 33)
NOWHERE_NAME = RawAddress(b'\0' * 33)

ARGON2_PARALLELISM = 1
ARGON2_MEMORY = 2345 # More than 2MiB
ARGON2_ITERATIONS = 1
ARGON2_SALT = b'saltysalt'
ARGON2_SIZE = 32

def REGULAR_HASH_FUNCTION(data):
    return hashlib.sha256(data).digest()

def POW_HASH_FUNCTION(data):
    return hash_secret_raw(data, ARGON2_SALT, ARGON2_ITERATIONS, ARGON2_MEMORY, ARGON2_PARALLELISM, ARGON2_SIZE, Type.I)
