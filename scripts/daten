#!/usr/bin/python3

import io, json, os, sys

from pydaten.network.node import Node
from pydaten.common.address import Address
from pydaten.utils.misc import get_public_ip, get_contrib_nodes

import argparse
import miniupnpc

DEFAULT_USERNAME = 'admin'
DEFAULT_PASSWORD = 'admin'
DEFAULT_IP = '0.0.0.0'
DEFAULT_PORT = 32323
try:
    DEFAULT_HOST = '{}:{}'.format(get_public_ip(), DEFAULT_PORT)
except:
    print("Cannot discover public ip!")
    exit(1)

if __name__ == '__main__':
    CONFIG_DIR = os.path.join(os.path.expanduser("~"), '.daten')
    if not os.path.exists(CONFIG_DIR):
        os.makedirs(CONFIG_DIR)
    CONFIG_PATH = os.path.join(CONFIG_DIR, 'node.json')

    try:
        with io.open(CONFIG_PATH, 'r') as f:
            config = json.load(f)
    except IOError:
        config = {'host': None,
                  'ip': DEFAULT_IP,
                  'port': DEFAULT_PORT,
                  'path': os.path.join(CONFIG_DIR, 'data'),
                  'initialPeers': [],
                  'username': DEFAULT_USERNAME,
                  'password': DEFAULT_PASSWORD}
        with io.open(CONFIG_PATH, 'w') as f:
            json.dump(config, f, indent = 2)

    parser = argparse.ArgumentParser()
    parser.add_argument("--host", help="Host of the node. (Default: {})".format(config['host']))
    parser.add_argument("--ip", help="Ip of the node. (Default: {})".format(config['ip']))
    parser.add_argument("--port", help="Port of the node. (Default: {})".format(config['port']))
    parser.add_argument("--path", help="Path for storing blocks. (Default: {})".format(config['path']))
    parser.add_argument("--init", help="Initial peer.")
    parser.add_argument('--nat', dest='nat', action='store_true',
                        help='Map router port to the running node\'s port')
    args = parser.parse_args()
    args.init = {args.init} if args.init else None

    if args.nat:
        try:
            upnp = miniupnpc.UPnP()
            upnp.discoverdelay = 10
            devices = upnp.discover()
            if devices:
                upnp.selectigd()
                upnp.addportmapping(DEFAULT_PORT, 'TCP', upnp.lanaddr, DEFAULT_PORT, 'daten', '')
                print("Port mapped successfully!")
        except:
            print("Some exceptions happend while discovering routers.")
            exit(1)


    node = Node(args.host or config['host'] or DEFAULT_HOST,
                args.ip or config['ip'],
                args.port or config['port'],
                args.path or config['path'],
                args.init or config['initialPeers'] or get_contrib_nodes(),
                config['username'],
                config['password'])
