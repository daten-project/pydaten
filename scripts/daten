#!/usr/bin/python3

import io, json, os

from pydaten.network.node import Node
from pydaten.common.address import Address
from pydaten.utils.misc import get_public_ip

import argparse

DEFAULT_IP = '0.0.0.0'
DEFAULT_PORT = 32323
try:
    DEFAULT_HOST = '{}:{}'.format(get_public_ip(), DEFAULT_PORT)
except:
    DEFAULT_HOST = '{}:{}'.format(DEFAULT_IP, DEFAULT_PORT)
DEFAULT_INITIAL_PEERS = [DEFAULT_HOST]

if __name__ == '__main__':
    CONFIG_DIR = os.path.join(os.path.expanduser("~"), '.daten')
    if not os.path.exists(CONFIG_DIR):
        os.makedirs(CONFIG_DIR)
    CONFIG_PATH = os.path.join(CONFIG_DIR, 'node.json')

    try:
        with io.open(CONFIG_PATH, 'r') as f:
            config = json.load(f)
    except IOError:
        config = {'host': DEFAULT_HOST,
                  'ip': DEFAULT_IP,
                  'port': DEFAULT_PORT,
                  'path': os.path.join(CONFIG_DIR, 'data'),
                  'initialPeers': DEFAULT_INITIAL_PEERS}
        with io.open(CONFIG_PATH, 'w') as f:
            json.dump(config, f, indent = 2)

    parser = argparse.ArgumentParser()
    parser.add_argument("--host", help="Host of the node. (Default: {})".format(config['host']))
    parser.add_argument("--ip", help="Ip of the node. (Default: {})".format(config['ip']))
    parser.add_argument("--port", help="Port of the node. (Default: {})".format(config['port']))
    parser.add_argument("--path", help="Path for storing blocks. (Default: {})".format(config['path']))
    parser.add_argument("--init", help="Initial peer.")
    args = parser.parse_args()
    args.init = {args.init} if args.init else None

    node = Node(args.host or config['host'],
                args.ip or config['ip'],
                args.port or config['port'],
                args.path or config['path'],
                args.init or config['initialPeers'])
